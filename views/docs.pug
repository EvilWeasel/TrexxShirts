extends layout


block content
    <div class="row">
        <nav id="ihvz" class="col-4 sticky-top">
            <header class="navbar-header">
                <h1>Inhaltsverzeichnis</h1>
            </header>
            <div class="nav-links">
                <a href="#intro" class="link">Einleitung</a>
                <a href="#node" class="link">Node</a>
                <a href="#express" class="link">Express</a>
                <a href="#sequelize" class="link">Sequelize</a>
                <a href="#pug" class="link">Pug</a>
                <a href="#challenges" class="link">Herausforderungen</a>
                <a href="#learnings" class="link">Lernziele</a>
            </div>
        </nav>

        <div class="docs col-8">
            <div class="main-section" id="intro">
                h1 Einleitung
                img(src="/images/trexxak.png", alt="Trexxak Logo")
                h5 Aufgabenstellung
                <p>
                    <iframe class="webview" src="https://cdn.jsdelivr.net/gh/trexxak/ProjectPrompts@main/Planspiel_Verwaltungssoftware_Shirts.md" name="iframeAufgabe"></iframe>
                </p>
                br
                h5 Unsere Lösung
                <p>Der TrexxShirts-Kundenmanager ist eine mehrseitige Webanwendung, die mit Node.js, Express.js und Sequelize realisiert wurde. Der TSK (patent-pending) bietet eine einfache und intuitive Oberfläche für alle nötigen Prozesse im Bereich des Kundenmanagments, eine Anbindung an eine Datenbank und ist ein Open-Source Projekt, welches mit Erweiterbarkeit im Fokus entwickelt wurde.
                </p>
                br
                h5 Begriffserläuterungen
                <p>
                    <strong>Node.js</strong> ist eine JavaScript-Runtime-Environment, die es ermöglicht Fullstack-Webapplikationen mit JavaScript zu erstellen.
                    br
                    <strong>Express</strong> ist ein BackEnd-Framework, das Designed wurde, um auf einfache Art und Weiße einen Webserver mit serverseitigem Javascript zu erstellen.
                    br
                    <strong>Sequelize</strong> ist ein ORM (Object Relational Mapper) für Node.js, der es ermöglicht Modelle als erweiterte JavaScript "Klassen" zu definieren und diese mit einer Datanbank zu verknüpfen.
                </p>
            </div>
            <div class="main-section" id="node">
                h1 Node
                p Node.js ist eine open-source, cross-platform, back-end JavaScript Runtime-Environment, die auf der V8-Engine von Google läuft. Diese Umgebung ist notwendig um JavaScript außerhalb des Webbrowsers ausführen zu können. Es unterstützt dabei weiter die Entwickler mit einem eigenen Packet-Manager, mit dem mit wenig aufwand zusätzliche Bibliotheken herunter geladen werden und eingebunden werden können.
                img(scr="/images/javascript_runtime_environment.png")
                p <strong>npm</strong> steht für Node-Package-Manager, und ist in jeder modernen Installation von Node.js bereits enthalten. Um ein Node.js-Projekt im aktuellen Ordner zu initialisieren, wird der Befehl <code>npm init</code> ausgeführt. Dadurch entsteht im aktuellen eine package.json. In dieser Datei befinden sich alle nennenswerten Eigenschaften, die für eine spätere Veröffentlichung als Modul im Package-Manager benötigt werden, und ebenfalls eine Liste mit Abhängigkeiten.
                p Abhängigkeiten sind nachinstallierte Bibliotheken, die einem mit Helferfunktionen, Linting, Klassen und auch ganzen Frameworks das Leben als Entwickler angenehmer, aber nicht unbedingt einfacher machen. Diese Abhägigkeiten haben aber nicht nur positive Seiten. Wenn etwa eine Sicherheitslücke in einer populären Bibliothek bekannt wird, ist ganz schnell mal die halbe IT-Branche betroffen. Generell hält sich aber die Regel, dass Open-Source-Software der richtige Weg ist, um mehr Sicherheit, und in folge dessen auch mehr Transparenz über diese Sicherheit zu schaffen.
            </div>
            <div class="main-section" id="express">
                <h1>Express</h1>
                p Express ist ein einfaches serverseitiges Node.js Webframework. Es liefert einige Werkzeuge, mit denen das enwickeln von Webanwendungen erleichtert wird. Eine Express.js Anwendung besteht zumindest aus der Datei add.js, in welcher die Middleware und die Controller registriert und der Webserver gestartet wird.

                p Ein Beispiel aus unserer Anwendung: 
                img(src="/images/app_use.jpg") 

                p Den unterschiedlichen Anfragen vom Client können im Router sogenannte Requesthandler zugewiesen werden, welche auf recht unkomplizierte Weise diese Anfragen bearbeiten. Jeder dieser Requesthandler ist eigentlich eine Mini-App, es werden bis zu drei Parameter übergeben (Anfrageobjekt, Antwortobjekt und der nächste Requesthandler) und verarbeitet, werden einer Anfrage mehrere Handler zugewiesen werden diese nacheinander ausgeführt.

                img(src="/images/error_handler.jpg")

                p Durch diese modulare Architektur lassen sich Prozesse, welche oft ausgeführt werden müssen, z. B. Authentifizierungslogiken, vor Abhandlung eines Prozesses einschieben.

                img(src="/images/app_get.jpg")
            </div>
            <div class="main-section" id="sequelize">
            
                <h1>Sequelize</h1>
                <p>Sequelize ist eine Bibliothek mit Promise-Basiertem ORM (Object-Relational-Mapper) für Node.js. Sequelize bietet diese Funktionen für die meisten gängigen Datenbank-Typen und Systeme an, unter anderem:</p>
                ul
                    li <code>MySQL</code>
                    li <code>PostgreSQL</code>
                    li <code>SQLite</code>
                    li <code>Microsoft SQL Server</code>
            </div>
            <div class="main-section" id="pug">
                <h1>Pug</h1>
                p Pug ist eine Template-Engine für Express.js und gilt als das standard View-Template. Wer sich mit Node.js und Express.js befasst, für den führt kein Weg an Pug vorbei. Es ist eine vereinfachte, whitespace-sensitive Schreibweise von HTML-Seiten. Mit simplen Textbefehlen, die den Namen der HTML-Tags entsprechen, baut man durch Einrückungen eine Baumstruktur auf, schließende Tags gibt es nicht. So bedeuten 2 Leerzeichen etwa, dass das folgende Element ein Kindelement des vorherigen ist. Außerdem bietet Pug viele mächtige Features wie z.B. Filtern, Vererbung, Iteration durch Sammlungen, Includes und vieles mehr.
                img(src="/images/inheritance_from_layout.jpg") 
                p Pug kann aber auch ohne Probleme mit der 'echten' HTML Schreibweise umgehen, die Verwendung kann aber manchmal zu unerwarteten Ergebnissen führen, zum Beispiel bei der Verwendung von Variablen: 
                p Zwei Möglichkeiten wie man Variablen lokal deklariert: 
                img(src="/images/strings_und_variablen.jpg")
                p Das Ergebnis in HTML:
                img(src="/images/html_ausgabe.jpg")
                p Vermischt man aber diese beiden Möglichkeiten, bekommt nicht das gewünschte Ergebnis:
                img(src="/images/attribute_interpolation.jpg") 
                p Der bessere Weg:
                img(src="/images/variablen_in_attribut.jpg")

            </div>
            <div class="main-section" id="challenges">
                <h1>Herausforderungen</h1>
                <p>Während der Realisierung des Projekts sind wir auf einige unterschiedlich schwierige Herausforderungen gestosen. Die Interessantesten davon:</p>
                <ul>
                    <li>
                        h5 Decision Fatigue
                        p Während der Projekt-Start-Phase fiel es uns schwer uns auf eingebundene Frameworks zu einigen. Es gibt einfach viel Auswahl auf dem Markt der Frameworks und da wir selbst mit noch keinem so richtig Vertraut sind, wussten wir natürlich auch nicht welche davon zu unserem Projekt und Kenntnisstand passen.
                    </li>
                    <li>
                        h5 Zeitmanagement
                        p Wer hat denn schon wieder an der verdammten Uhr gedreht?<br>Da wir zu unserem Projekt auch eine kleine Dokumentation schreiben wollten, haben wir auch am Wochenende die ein oder andere Stunde zusammen gearbeitet. In unserem Fall hat uns dies nicht gestört, ganz im Gegenteil. Aber in einem Szenario im Betrieb mit anderen Gegebenheit ist dies vielleicht weniger Erholung von der Arbeitswoche. 
                    </li>
                    <li>
                        h5 Kommunikation Front-Backend
                        p Sequelize als ORM war, nach einigen anfänglichen Schwierigkeiten die Foreign-Key-Relationships und Joins darzustellen, sehr einfach im Umgang, zügig zu lernen und hat Spass gemacht 10/10 "Gerne Wieder!"<br>Diese Daten dann über Express an die pug-view zu übergeben, war unsere größte Herausforderung. Nach einiger Recherche und einem knallhartem RTFM haben wir auch diese Herausforderung gemeistert.
                    </li>
                </ul>
            </div>
            <div class="main-section" id="learnings">
                <h1>Lernziele</h1>
                h4 String-Interpolation
                p In der Programmierung bedeutet "String Interpolation", dass aus einem "String-Literal" durch Einfügen von Variablen, innerhalb sogenannten "Escape-Sequenzen", eine Zeichenkette mit dynamisch eingefügten Variablen erzeugt wird.
                h6 Beispiel
                img(src="images/string-interpolation.png")
                p Für pug werden statt <code>.html</code> : <code>.pug</code> Dateien verwendet. Innerhalb dieser kann man entweder den normalen html-syntax nutzen, oder den durch pug eingefügten, in dem man einen JavaScript ähnlichen Syntax nutzt. Wichtig ist nur, dass man diese beiden unterschiedlichen Escape-Sequenzen nicht miteinander verwechselt.
                h4 Seiten-Mockup
                p Nach dem wir uns zuerst auf das Back-End fokusiert haben, und dieses weitesgehend bereit war, wurde uns klar, dass wir uns bis dahin noch keine Gedanken über das User-Interface gemacht haben. Dies war in diesem Fall kein Hindernis, aber sollte beim nächsten Projekt beachtet werden.
                h4 JavaScript - Das Land der unendlichen Möglichkeiten
                p Wir haben uns, und das bewusst, in diesem Projekt dafür entschieden neue Möglichkeiten auszukundschaften. Für diesen Zweck haben wir uns in oben beschriebenen Frameworks eingearbeitet, neue Konventionen gelernt und auch noch einiges an Hintergrundwissen gewinnen können.
            </div>
        </div>
    </div>